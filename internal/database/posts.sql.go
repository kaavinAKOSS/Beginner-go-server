// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: posts.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createPost = `-- name: CreatePost :one

INSERT INTO posts(id,title,description,authorId) VALUES ($1,$2,$3,$4)
RETURNING id, title, description, authorid
`

type CreatePostParams struct {
	ID          uuid.UUID
	Title       string
	Description string
	Authorid    uuid.UUID
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Authorid,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Authorid,
	)
	return i, err
}

const getPostById = `-- name: GetPostById :one

SELECT id, title, description, authorid FROM posts WHERE id=$1
`

func (q *Queries) GetPostById(ctx context.Context, id uuid.UUID) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPostById, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Authorid,
	)
	return i, err
}

const getPostByUser = `-- name: GetPostByUser :many

SELECT id, title, description, authorid FROM posts WHERE authorId=$1
`

func (q *Queries) GetPostByUser(ctx context.Context, authorid uuid.UUID) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getPostByUser, authorid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Authorid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
