// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const getExistingUser = `-- name: GetExistingUser :one

SELECT id, name, password, created_at FROM users WHERE name=$1 AND password=$2
`

type GetExistingUserParams struct {
	Name     string
	Password string
}

func (q *Queries) GetExistingUser(ctx context.Context, arg GetExistingUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, getExistingUser, arg.Name, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one

SELECT id, name, password, created_at FROM users WHERE id=$1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const signUpUser = `-- name: SignUpUser :one

INSERT INTO users(id,name,password,created_at)
VALUES ($1,$2,$3,$4)
RETURNING id, name, password, created_at
`

type SignUpUserParams struct {
	ID        uuid.UUID
	Name      string
	Password  string
	CreatedAt time.Time
}

func (q *Queries) SignUpUser(ctx context.Context, arg SignUpUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, signUpUser,
		arg.ID,
		arg.Name,
		arg.Password,
		arg.CreatedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}
